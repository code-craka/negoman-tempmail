generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  clerkId       String          @unique
  email         String?
  plan          Plan            @default(FREE)
  planExpiresAt DateTime?
  apiKey        String?         @unique
  referralCode  String          @unique @default(cuid())
  referredBy    String?
  credits       Int             @default(0)
  totalSpent    Decimal         @default(0)
  lastActiveAt  DateTime        @default(now())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  apiUsage      ApiUsage[]
  payments      Payment[]
  tempEmails    TempEmail[]
  analytics     UserAnalytics[]
  referrer      User?           @relation("UserReferrals", fields: [referredBy], references: [id])
  referrals     User[]          @relation("UserReferrals")

  @@map("users")
}

model TempEmail {
  id           String    @id @default(cuid())
  address      String    @unique
  domain       String
  provider     Provider
  userId       String?
  sessionId    String?
  expiresAt    DateTime
  isActive     Boolean   @default(true)
  customDomain String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
  user         User?     @relation(fields: [userId], references: [id])

  @@index([address])
  @@index([expiresAt])
  @@index([userId])
  @@index([sessionId])
  @@map("temp_emails")
}

model Message {
  id          String    @id @default(cuid())
  tempEmailId String
  messageId   String    @unique
  from        String
  to          String
  subject     String
  content     String
  htmlContent String?
  isRead      Boolean   @default(false)
  attachments Json?
  receivedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  tempEmail   TempEmail @relation(fields: [tempEmailId], references: [id], onDelete: Cascade)

  @@index([tempEmailId])
  @@index([receivedAt])
  @@map("messages")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  stripeSessionId String        @unique
  stripePaymentId String?
  plan            Plan
  amount          Decimal
  currency        String        @default("usd")
  status          PaymentStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("payments")
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  method    String
  requests  Int      @default(1)
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, endpoint, date])
  @@index([userId])
  @@index([date])
  @@map("api_usage")
}

model UserAnalytics {
  id         String   @id @default(cuid())
  userId     String?
  sessionId  String?
  event      String
  properties Json?
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  referrer   String?
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([sessionId])
  @@index([event])
  @@index([timestamp])
  @@map("user_analytics")
}

model SystemAnalytics {
  id        String   @id @default(cuid())
  metric    String
  value     Decimal
  metadata  Json?
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([metric, date])
  @@index([metric])
  @@index([date])
  @@map("system_analytics")
}

model ProviderHealth {
  id           String   @id @default(cuid())
  provider     Provider @unique
  isHealthy    Boolean  @default(true)
  responseTime Int?
  errorRate    Decimal  @default(0)
  lastChecked  DateTime @default(now())
  metadata     Json?

  @@map("provider_health")
}

enum Plan {
  FREE
  QUICK
  EXTENDED
  PRO
  ENTERPRISE
}

enum Provider {
  MAILTM
  ONESECMAIL
  GUERRILLAMAIL
  TEMPMAIL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
